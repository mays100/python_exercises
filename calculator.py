import sys

def calculator(num1, operator, num2):
    """מבצע פעולה אריתמטית על שני מספרים."""
    if operator == '+':
        return num1 + num2
    elif operator == '-':
        return num1 - num2
    elif operator == '*':
        return num1 * num2
    elif operator == '/':
        if num2 == 0:
            return "שגיאה: לא ניתן לחלק באפס!"
        return num1 / num2
    else:
        return "שגיאה: פעולה לא נתמכת!"

if __name__ == "__main__":
    if len(sys.argv) != 4:
        print("שימוש: python calculator.py <מספר1> <פעולה> <מספר2>")
        sys.exit(1)

    try:
        num1 = float(sys.argv[1])
        operator = sys.argv[2]
        num2 = float(sys.argv[3])
    except ValueError:
        print("שגיאה: קלט לא חוקי. אנא הזן מספרים.")
        sys.exit(1)

    result = calculator(num1, operator, num2)
    print(f"התוצאה היא: {result}")

# הערות לגבי אמינות, תחזוקה ומדרגיות:
#
# אמינות:
# 1. אימות קלט: הקוד בודק אם סופקו שלושה ארגומנטים בשורת הפקודה.
# 2. טיפול בשגיאות בסיסי: נעשה ניסיון להמיר את הארגומנטים למספרים, ואם זה נכשל, מוצגת הודעת שגיאה.
# 3. טיפול בחלוקה באפס: הפונקציה `calculator` בודקת חלוקה באפס ומחזירה הודעת שגיאה.
#
# תחזוקה:
# 1. שימוש בפונקציה: הפעולה האריתמטית מבודדת בפונקציה `calculator`, מה שמקל על שינוי או הוספת פעולות חדשות.
# 2. קריאות: הקוד יחסית קריא וקל להבנה.
# 3. הערות: הוספו הערות בסיסיות להסברת חלקים מהקוד.
#
# מדרגיות:
# 1. פונקציה מבודדת: ניתן להרחיב את הפונקציה `calculator` כדי לתמוך בפעולות נוספות.
# 2. טיפול בארגומנטים: כדי לתמוך ביותר משני מספרים, יהיה צורך לשנות את אופן קבלת הארגומנטים משורת הפקודה ואת הלוגיקה של הפונקציה.
# 3. טיפול בשגיאות: ניתן להוסיף טיפול שגיאות מקיף יותר (למשל, עבור פעולות לא נתמכות).
# 4. בדיקות יחידה: הוספת בדיקות יחידה (באמצעות מודול כמו `unittest`) תבטיח שהפונקציה `calculator` פועלת כצפוי עבור מקרים שונים ותקל על שינויים עתידיים.